- name: Create ComputeOps settings
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Pre-requisites for Compute Ops settings
      ansible.builtin.assert:
        that:
          - hpegl_auth_token is defined and hpegl_auth_token != ''
          - iso_local_image_path is defined and iso_local_image_path != ''

    - name: Initialize OS setting name
      vars:
        temp_sett_name: "{{ hpegl_group | default('test') }}-os-setting"
      ansible.builtin.set_fact:
        local_setting_name: "{{ hpegl_setting_name | default(temp_sett_name) }}"

    - name: Check if settings is already present
      ansible.builtin.uri:
        url: "{{ hpegl_com_region_url }}/compute-ops-mgmt/v1/settings?filter=name%20eq%20%27{{ local_setting_name }}%27"
        method: GET
        headers:
          Authorization: "Bearer {{ hpegl_auth_token }}"
          Content-Type: "application/json"
        return_content: true
        status_code: 200
      register: rg_setting_check

    # TODO: Fail if the existing setting is not a OS category
    - name: Print the output of Setting API
      ansible.builtin.debug:
        msg: "{{ rg_setting_check }}"
      when: enable_debug is defined and enable_debug

    - name: Create settings if not present
      when: rg_setting_check.json.count != 1
      block:
        - name: Create settings with new OS image
          ansible.builtin.uri:
            url: "{{ hpegl_com_region_url }}/compute-ops-mgmt/v1/settings"
            method: POST
            headers:
              Authorization: "Bearer {{ hpegl_auth_token }}"
              Content-Type: application/json
            body:
              name: "{{ local_setting_name }}"
              description: "{{ setting_description | default(omit) }}"
              category: "{{ setting_category | default('OS') }}"
              settings:
                DEFAULT:
                  mediaUrl: "{{ iso_local_image_path }}"
                  osType: "{{ iso_os_type | default('CUSTOM') }}"
                  unattendedInstallationFileUrl: "{{ kickstart_local_path | default(omit) }}"
            body_format: json
            return_content: true
            status_code: [200, 201, 202]
          retries: "{{ hpegl_uri_retry | default(3) }}"
          delay: "{{ hpegl_uri_delay | default(10) }}"
          register: rg_patch_group_settings
          until: rg_patch_group_settings.status in [200, 201, 202]

        - name: Output of patch operation
          ansible.builtin.debug:
            msg: "{{ rg_patch_group_settings }}"
          when: enable_debug is defined and enable_debug

        - name: Wait to sync Compute Ops operations
          ansible.builtin.pause:
            seconds: "{{ wait_for_com_sync | default(5) }}"

        - name: Set setting uri to a variable
          ansible.builtin.set_fact:
            hpegl_os_setting_uri: "{{ rg_patch_group_settings.json.resourceUri }}"

    - name: Set setting uri to variable
      when: rg_setting_check.json.count == 1
      ansible.builtin.set_fact:
        hpegl_os_setting_uri: "{{ rg_setting_check.json['items'][0]['resourceUri'] }}"

    - name: Display OS settings URI
      ansible.builtin.debug:
        msg: "{{ hpegl_os_setting_uri }}"
      when: enable_debug is defined and enable_debug

    - name: Set stats to OS setting uri
      ansible.builtin.set_stats:
        data:
          hpegl_os_setting_uri: "{{ hpegl_os_setting_uri }}"
